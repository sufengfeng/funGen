C51 COMPILER V9.60.0.0   TIMER                                                             09/04/2020 23:36:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE timer.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\t
                    -imer.lst) TABS(2) OBJECT(.\list\timer.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          /*************  功能说明  **************
  15          
  16          本文件为STC15xxx系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  17          
  18          
  19          ******************************************/
  20          
  21          
  22          
  23          #include  "timer.h"
  24          #include "USART1.h"
  25          /********************* Timer0中断函数************************/
  26          //10us中断一次
  27          void timer0_int (void) interrupt TIMER0_VECTOR
  28          {
  29   1        static unsigned long  counter=0;
  30   1        counter++;
  31   1        if(counter>100000){
  32   2          counter=0;
  33   2          P32 = ~P32;
  34   2          P33 = ~P33;
  35   2        }
  36   1      }
  37          
  38          /********************* Timer1中断函数************************/
  39          void timer1_int (void) interrupt TIMER1_VECTOR
  40          {
  41   1         P26 = ~P26;
  42   1      
  43   1      }
  44          
  45          /********************* Timer2中断函数************************/
  46          void timer2_int (void) interrupt TIMER2_VECTOR
  47          {
  48   1        P10 = ~P10;
  49   1      }
  50          
  51          
  52          //========================================================================
  53          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  54          // 描述: 定时器初始化程序.
C51 COMPILER V9.60.0.0   TIMER                                                             09/04/2020 23:36:04 PAGE 2   

  55          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  56          // 返回: 成功返回0, 空操作返回1,错误返回2.
  57          // 版本: V1.0, 2012-10-22
  58          //========================================================================
  59          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  60          {
  61   1        if(TIM > Timer2)  return 1; //空操作
  62   1      
  63   1        if(TIM == Timer0)
  64   1        {
  65   2          TR0 = 0;    //停止计数
  66   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
  67   2          else                  ET0 = 0;  //禁止中断
  68   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
  69   2          else                  PT0 = 0;  //低优先级中断
  70   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
  71   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  72   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  73   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  74   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
  75   2          else                    TMOD &= ~0x04;  //定时
  76   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
  77   2          else              INT_CLKO &= ~0x01;  //不输出时钟
  78   2          
  79   2          TH0 = (u8)(TIMx->TIM_Value >> 8);
  80   2          TL0 = (u8)TIMx->TIM_Value;
  81   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
  82   2          return  0;    //成功
  83   2        }
  84   1      
  85   1        if(TIM == Timer1)
  86   1        {
  87   2          TR1 = 0;    //停止计数
  88   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
  89   2          else                  ET1 = 0;  //禁止中断
  90   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
  91   2          else                  PT1 = 0;  //低优先级中断
  92   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
  93   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  94   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
  95   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
  96   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
  97   2          else                    TMOD &= ~0x40;  //定时
  98   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
  99   2          else              INT_CLKO &= ~0x02;  //不输出时钟
 100   2          
 101   2          TH1 = (u8)(TIMx->TIM_Value >> 8);
 102   2          TL1 = (u8)TIMx->TIM_Value;
 103   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
 104   2          return  0;    //成功
 105   2        }
 106   1      
 107   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 108   1        {
 109   2          AUXR &= ~(1<<4);  //停止计数
 110   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
 111   2          else                    IE2  &= ~(1<<2);  //禁止中断
 112   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 113   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 114   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 115   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
C51 COMPILER V9.60.0.0   TIMER                                                             09/04/2020 23:36:04 PAGE 3   

 116   2          else                    AUXR &= ~(1<<3);  //定时
 117   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
 118   2          else              INT_CLKO &= ~0x04;  //不输出时钟
 119   2      
 120   2          TH2 = (u8)(TIMx->TIM_Value >> 8);
 121   2          TL2 = (u8)TIMx->TIM_Value;
 122   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
 123   2          return  0;    //成功
 124   2        }
 125   1        return 2; //错误
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    593    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
